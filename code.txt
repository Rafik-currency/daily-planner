import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, onAuthStateChanged, signInAnonymously } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, updateDoc, deleteDoc, doc, query, where, Timestamp } from 'firebase/firestore';
import { v4 as uuidv4 } from 'uuid';

// Global variables for Firebase configuration. These are provided by the canvas environment.
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '';

// Main application component
const App = () => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState('');
  const [editingTask, setEditingTask] = useState(null);
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('Personal');
  const [categories, setCategories] = useState(['Personal', 'Work', 'Shopping']);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [showCategoryInput, setShowCategoryInput] = useState(false);

  // Initialize Firebase and set up authentication
  useEffect(() => {
    // Check if firebaseConfig is not empty
    if (Object.keys(firebaseConfig).length === 0) {
      console.error("Firebase config is not available.");
      return;
    }
    const app = initializeApp(firebaseConfig);
    const firestore = getFirestore(app);
    const firebaseAuth = getAuth(app);
    setDb(firestore);
    setAuth(firebaseAuth);

    // Sign in the user using the custom token or anonymously
    const signIn = async () => {
      try {
        if (initialAuthToken) {
          await signInWithCustomToken(firebaseAuth, initialAuthToken);
        } else {
          await signInAnonymously(firebaseAuth);
        }
      } catch (error) {
        console.error("Firebase authentication error:", error);
      }
    };

    const unsubscribe = onAuthStateChanged(firebaseAuth, (user) => {
      if (user) {
        setUserId(user.uid);
      } else {
        setUserId(null);
      }
      setIsAuthReady(true);
    });

    signIn();
    return () => unsubscribe();
  }, []);

  // Listen for tasks in Firestore
  useEffect(() => {
    if (!isAuthReady || !db || !userId) return;

    // The collection path for private user data
    const tasksCollectionPath = `artifacts/${appId}/users/${userId}/tasks`;
    const tasksCollection = collection(db, tasksCollectionPath);
    
    // Create a query to filter tasks by the selected category
    const q = query(tasksCollection, where('category', '==', selectedCategory));

    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const fetchedTasks = [];
      querySnapshot.forEach((doc) => {
        fetchedTasks.push({ id: doc.id, ...doc.data() });
      });
      // Sort tasks to show incomplete ones first, then completed ones
      fetchedTasks.sort((a, b) => {
        if (a.completed !== b.completed) {
          return a.completed ? 1 : -1;
        }
        return a.timestamp?.seconds - b.timestamp?.seconds;
      });
      setTasks(fetchedTasks);
    }, (error) => {
      console.error("Failed to fetch tasks from Firestore:", error);
    });

    return () => unsubscribe();
  }, [isAuthReady, db, userId, selectedCategory]);

  // Handle adding a new task
  const handleAddTask = async () => {
    if (newTask.trim() === '' || !db || !userId) return;
    try {
      const tasksCollectionPath = `artifacts/${appId}/users/${userId}/tasks`;
      await addDoc(collection(db, tasksCollectionPath), {
        text: newTask,
        completed: false,
        category: selectedCategory,
        timestamp: Timestamp.now(),
      });
      setNewTask('');
    } catch (error) {
      console.error("Error adding task:", error);
    }
  };

  // Handle deleting a task
  const handleDeleteTask = async (taskId) => {
    if (!db || !userId) return;
    try {
      const tasksCollectionPath = `artifacts/${appId}/users/${userId}/tasks`;
      await deleteDoc(doc(db, tasksCollectionPath, taskId));
    } catch (error) {
      console.error("Error deleting task:", error);
    }
  };

  // Handle marking a task as complete or incomplete
  const handleToggleComplete = async (taskId, completed) => {
    if (!db || !userId) return;
    try {
      const tasksCollectionPath = `artifacts/${appId}/users/${userId}/tasks`;
      await updateDoc(doc(db, tasksCollectionPath, taskId), {
        completed: !completed,
      });
    } catch (error) {
      console.error("Error updating task:", error);
    }
  };

  // Handle editing a task
  const handleEditTask = async (taskId, newText) => {
    if (!db || !userId || newText.trim() === '') return;
    try {
      const tasksCollectionPath = `artifacts/${appId}/users/${userId}/tasks`;
      await updateDoc(doc(db, tasksCollectionPath, taskId), {
        text: newText,
      });
      setEditingTask(null);
    } catch (error) {
      console.error("Error editing task:", error);
    }
  };

  // Handle adding a new category
  const handleAddCategory = () => {
    if (newCategoryName.trim() === '' || categories.includes(newCategoryName)) return;
    setCategories([...categories, newCategoryName]);
    setSelectedCategory(newCategoryName);
    setNewCategoryName('');
    setShowCategoryInput(false);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-4 sm:p-8 flex flex-col items-center">
      <div className="w-full max-w-2xl bg-gray-800 p-6 sm:p-8 rounded-2xl shadow-xl flex flex-col space-y-6">
        {/* Header and User ID */}
        <div className="flex flex-col items-center space-y-2">
          <h1 className="text-3xl sm:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-teal-400 to-blue-500">
            Daily Planner
          </h1>
          {userId && (
            <div className="text-gray-400 text-sm break-all">
              User ID: {userId}
            </div>
          )}
        </div>

        {/* Category Selector */}
        <div className="flex flex-wrap items-center justify-center sm:justify-start gap-2 mb-4">
          <label htmlFor="category-select" className="text-lg font-medium text-gray-300">Category:</label>
          <select
            id="category-select"
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="flex-grow sm:flex-grow-0 px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
          >
            {categories.map((cat, index) => (
              <option key={index} value={cat}>{cat}</option>
            ))}
          </select>
          {!showCategoryInput && (
            <button
              onClick={() => setShowCategoryInput(true)}
              className="p-2 bg-blue-600 hover:bg-blue-700 text-white rounded-full transition-colors shadow-lg"
              aria-label="Add new category"
            >
              {/* Plus icon from react-icons/lu */}
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M5 12h14M12 5v14"/></svg>
            </button>
          )}
          {showCategoryInput && (
            <div className="flex items-center gap-2 mt-2 w-full sm:w-auto">
              <input
                type="text"
                value={newCategoryName}
                onChange={(e) => setNewCategoryName(e.target.value)}
                placeholder="New category name"
                className="flex-grow px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                onClick={handleAddCategory}
                className="p-2 bg-green-500 hover:bg-green-600 text-white rounded-full transition-colors shadow-lg"
                aria-label="Save new category"
              >
                {/* Check icon from react-icons/ri */}
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 6L9 17l-5-5"/></svg>
              </button>
            </div>
          )}
        </div>

        {/* Add Task Input */}
        <div className="flex items-center space-x-2 w-full">
          <input
            type="text"
            className="flex-grow p-3 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 transition-colors placeholder-gray-400"
            placeholder="Add a new task..."
            value={newTask}
            onChange={(e) => setNewTask(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleAddTask()}
          />
          <button
            onClick={handleAddTask}
            className="p-3 bg-teal-500 hover:bg-teal-600 text-white rounded-lg transition-colors shadow-lg"
            aria-label="Add task"
          >
            {/* Plus icon from react-icons/lu */}
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M5 12h14M12 5v14"/></svg>
          </button>
        </div>

        {/* Task List */}
        <div className="flex-grow overflow-y-auto max-h-[60vh] space-y-3">
          {tasks.length > 0 ? (
            tasks.map((task) => (
              <div
                key={task.id}
                className={`flex items-center justify-between p-4 rounded-xl shadow-md transition-all ${
                  task.completed ? 'bg-gray-700 text-gray-400 line-through' : 'bg-gray-700 text-white'
                }`}
              >
                {editingTask?.id === task.id ? (
                  <input
                    type="text"
                    value={editingTask.text}
                    onChange={(e) => setEditingTask({ ...editingTask, text: e.target.value })}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') handleEditTask(task.id, editingTask.text);
                      if (e.key === 'Escape') setEditingTask(null);
                    }}
                    className="flex-grow p-2 bg-gray-600 border border-gray-500 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                ) : (
                  <div
                    onClick={() => handleToggleComplete(task.id, task.completed)}
                    className="flex-grow cursor-pointer"
                  >
                    {task.text}
                  </div>
                )}
                
                <div className="flex items-center space-x-2 ml-4">
                  {editingTask?.id === task.id ? (
                    <button
                      onClick={() => handleEditTask(task.id, editingTask.text)}
                      className="p-2 bg-green-500 hover:bg-green-600 text-white rounded-full transition-colors"
                      aria-label="Save changes"
                    >
                      {/* Check icon from react-icons/ri */}
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 6L9 17l-5-5"/></svg>
                    </button>
                  ) : (
                    <button
                      onClick={() => setEditingTask({ id: task.id, text: task.text })}
                      className="p-2 bg-blue-500 hover:bg-blue-600 text-white rounded-full transition-colors"
                      aria-label="Edit task"
                    >
                      {/* Pencil icon from react-icons/lu */}
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"/></svg>
                    </button>
                  )}
                  <button
                    onClick={() => handleDeleteTask(task.id)}
                    className="p-2 bg-red-500 hover:bg-red-600 text-white rounded-full transition-colors"
                    aria-label="Delete task"
                  >
                    {/* Trash icon from react-icons/lu */}
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 6h18M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2M10 11v6M14 11v6"/></svg>
                  </button>
                </div>
              </div>
            ))
          ) : (
            <div className="text-center text-gray-500 p-8">
              No tasks for this category yet. Add one above!
            </div>
          )}
        </div>

      </div>
    </div>
  );
};

export default App;
